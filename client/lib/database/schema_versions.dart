import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class _S2 extends i0.VersionedSchema {
  _S2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    serverConnections,
    authentication,
  ];
  late final Shape0 serverConnections = Shape0(
      source: i0.VersionedTable(
        entityName: 'server_connections',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 authentication = Shape1(
      source: i0.VersionedTable(
        entityName: 'authentication',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_2,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get host =>
      columnsByName['host']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get port =>
      columnsByName['port']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('host', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_1(String aliasedName) =>
    i1.GeneratedColumn<int>('port', aliasedName, false,
        type: i1.DriftSqlType.int);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get refreshToken =>
      columnsByName['refresh_token']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('refresh_token', aliasedName, false,
        type: i1.DriftSqlType.string);

final class _S3 extends i0.VersionedSchema {
  _S3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    serverConnections,
    authentication,
  ];
  late final Shape0 serverConnections = Shape0(
      source: i0.VersionedTable(
        entityName: 'server_connections',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_0,
          _column_1,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 authentication = Shape2(
      source: i0.VersionedTable(
        entityName: 'authentication',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_2,
          _column_3,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get refreshToken =>
      columnsByName['refresh_token']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get accessToken =>
      columnsByName['access_token']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('access_token', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, _S2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, _S3 schema) from2To3,
}) {
  return i1.Migrator.stepByStepHelper(step: (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = _S2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = _S3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  });
}
